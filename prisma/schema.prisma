generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  isTwoFactorEnabled    Boolean                @default(false)
  role                  UserRole               @default(USER)
  failedLoginAttempts   Int                    @default(0) @map("failed_login_attempts")
  lockedUntil           DateTime?              @map("locked_until")
  accounts              Account[]
  TwoFactorConfirmation TwoFactorConfirmation?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_token")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_token")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_token")
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("two_factor_confimation")
}

enum LeadStage {
  LEAD
  KVALIFIKACE
  NAVRH
  JEDNANI
  VYHRANO
  PROHRANO
}

model Lead {
  id                  String                @id @default(cuid())
  company             String
  contactName         String
  email               String
  budget              Int?
  industry            String?
  source              String?
  stage               LeadStage             @default(LEAD)
  score               Int                   @default(0)
  notes               String?
  budgetScore         Int                   @default(0)
  urgencyScore        Int                   @default(0)
  fitScore            Int                   @default(0)
  decisionMakerScore  Int                   @default(0)
  referenceScore      Int                   @default(0)
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  deals               Deal[]
  activities          Activity[]
  sequenceEnrollments SequenceEnrollment[]

  @@map("crm_leads")
}

model Deal {
  id         String    @id @default(cuid())
  leadId     String    @map("lead_id")
  valueCZK   Int       @map("value_czk")
  status     String
  probability Int      @default(0)
  nextStep   String?   @map("next_step")
  dueDate    DateTime? @map("due_date")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  lead       Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  activities Activity[]
  proposals  Proposal[]
  financeRecords FinanceRecord[]

  @@map("crm_deals")
}

model Activity {
  id        String    @id @default(cuid())
  leadId    String?   @map("lead_id")
  dealId    String?   @map("deal_id")
  type      String
  content   String
  createdAt DateTime  @default(now()) @map("created_at")
  lead      Lead?     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  deal      Deal?     @relation(fields: [dealId], references: [id], onDelete: Cascade)

  @@map("crm_activities")
}

model SequenceTemplate {
  id          String               @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime             @default(now()) @map("created_at")
  steps       SequenceStep[]
  enrollments SequenceEnrollment[]

  @@map("crm_sequence_templates")
}

model SequenceStep {
  id         String            @id @default(cuid())
  templateId String            @map("template_id")
  order      Int
  title      String
  content    String?
  delayDays  Int               @default(0) @map("delay_days")
  template   SequenceTemplate  @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("crm_sequence_steps")
}

model SequenceEnrollment {
  id          String           @id @default(cuid())
  templateId  String           @map("template_id")
  leadId      String?          @map("lead_id")
  status      String           @default("ACTIVE")
  currentStep Int              @default(0) @map("current_step")
  createdAt   DateTime         @default(now()) @map("created_at")
  template    SequenceTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  lead        Lead?            @relation(fields: [leadId], references: [id], onDelete: SetNull)

  @@map("crm_sequence_enrollments")
}

enum ProposalStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
}

model Proposal {
  id          String          @id @default(cuid())
  dealId      String?         @map("deal_id")
  title       String
  scopeMd     String          @map("scope_md")
  timelineMd  String          @map("timeline_md")
  status      ProposalStatus  @default(DRAFT)
  totalCZK    Int             @default(0) @map("total_czk")
  shareToken  String          @unique @map("share_token")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  deal        Deal?           @relation(fields: [dealId], references: [id], onDelete: SetNull)
  priceItems  PriceItem[]

  @@map("crm_proposals")
}

model PriceItem {
  id            String    @id @default(cuid())
  proposalId    String    @map("proposal_id")
  label         String
  qty           Int
  unitPriceCZK  Int       @map("unit_price_czk")
  vatRate       Decimal   @map("vat_rate") @db.Decimal(5, 4)
  proposal      Proposal  @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@map("crm_price_items")
}

enum FinanceRecordType {
  INCOME
  EXPENSE
}

model FinanceRecord {
  id        String            @id @default(cuid())
  date      DateTime
  type      FinanceRecordType
  label     String
  amountCZK Int               @map("amount_czk")
  dealId    String?           @map("deal_id")
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")
  deal      Deal?             @relation(fields: [dealId], references: [id], onDelete: SetNull)

  @@map("finance_records")
}
